library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;
use work.common.all;

entity ProcessadorImagemGMAW is
  port (
  in_clock      : in std_logic;
  in_linha      : in std_logic;
  in_janela     : in std_logic;
  pixel_entrada : in std_logic_vector(7 downto 0) := "00000000";
  imagem        : out MatrizImagem);
end ProcessadorImagemGMAW;


architecture comportamental of ProcessadorImagemGMAW is
component ImagensRAM
  PORT
  (
    clock   : IN STD_LOGIC  := '1';
    data    : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    rdaddress   : IN STD_LOGIC_VECTOR (13 DOWNTO 0);
    wraddress   : IN STD_LOGIC_VECTOR (13 DOWNTO 0);
    wren    : IN STD_LOGIC  := '0';
    q   : OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
  );
END component;



signal bloco_atual      : unsigned(1 downto 0) := "00";
signal endereco_escrita : unsigned(13 downto 0) := "00000000000000";
signal endereco_leitura : unsigned(13 downto 0) := "00000000000000";
--signal ativar_escrita : std_logic  := '0';
signal q                : std_logic_vector(7 downto 0);



begin
-- Entrada está sempre indo para a memoria
ram : ImagensRAM port map(in_clock, pixel_entrada, endereco_escrita, in_clock, q);

process(in_janela)
begin
  if(in_janela'event and in_janela = '1') then
    -- testar se imagem é processável
    bloco_atual <= bloco_atual + 1;
  end if;
  if(in_janela'event and in_janela = '0') then
    endereco_escrita <= std_logic_vector(bloco_atual) & "000000000000";
  end if;
end process;


process(in_clock)
begin
  if(in_clock'event and in_clock = '1') then
    endereco_escrita = endereco_escrita + 1;
  end if;
end process;




end comportamental;