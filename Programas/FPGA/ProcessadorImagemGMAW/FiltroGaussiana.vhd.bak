library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;
use work.common.all;

entity FiltroGaussiana is
  port (
  in_clock         : in std_logic;
  in_janela        : in std_logic;
  pixel_entrada    : in std_logic_vector(7 downto 0) := (others => '0');
  pixel_filtrado   : out std_logic_vector(7 downto 0) := (others => '0');
  bloco_atual      : inout unsigned(1 downto 0) := "00";
  endereco_escrita : inout unsigned(13 downto 0) := (others => '0'));
  
end FiltroGaussiana;


architecture comportamental of FiltroGaussiana is
  signal coluna : natural range (numcols - 1) downto 0 := 0;
  signal linha  : natural range (numlin  - 1) downto 0 := 0;
  signal mascara_gaussiana              : matriz33;
  signal janela_p_filtro                : matriz33;
  signal mascara_gaussiana_multiplicada : matriz33;
  signal soma_imagem : unsigned(25 downto 0) := (others => '0');
  signal buffer_filtro : array (2 * numcols + 1 downto 0) of std_logic_vector(7 downto 0) := (others => '0');

  mascara_gaussiana(0,0) <= std_logic_vector(7 downto 0) := x"03";
  mascara_gaussiana(0,1) <= std_logic_vector(7 downto 0) := x"15";
  mascara_gaussiana(0,2) <= std_logic_vector(7 downto 0) := x"03";
  mascara_gaussiana(1,0) <= std_logic_vector(7 downto 0) := x"15";
  mascara_gaussiana(1,1) <= std_logic_vector(7 downto 0) := x"9E";
  mascara_gaussiana(1,2) <= std_logic_vector(7 downto 0) := x"15";
  mascara_gaussiana(2,0) <= std_logic_vector(7 downto 0) := x"03";
  mascara_gaussiana(2,1) <= std_logic_vector(7 downto 0) := x"15";
  mascara_gaussiana(2,2) <= std_logic_vector(7 downto 0) := x"03";

begin

process(in_janela,in_clock)
begin
  
  if(rising_edge(in_clock)) then
    buffer_filtro(2 * numcols + 1 downto 1) <= buffer_filtro(2 * numcols downto 0);
    buffer_filtro(0) <= pixel_entrada;

    Soma_imagem <= soma_imagem + unsigned(pixel_filtrado);
    if(in_janela = '1') then
      coluna <= 0;
      linha <= 0;
      soma_imagem <= (others => '0');
    else
      if (coluna = numcols - 1) then
        -- fim de uma linha
        coluna <= 0;

        if (linha = numlin -1) then
        -- fim de uma imagem
          linha <= 0;
        else
        -- proxima linha
          linha <= linha + 1;
        end if;
      else
        -- cÃ¡lculo normal

        coluna <= coluna + 1;
      end if;
    end if;
  end if;

end process;

end comportamental;